{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "tarfile.open(**kwargs, mode='r', fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9898}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "multiprocessing.Value(typecode_or_type, *args, lock=True)", "intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type . If `lock` is True ( the default ) then a new recursive lock object is created to synchronize access to the value .", "question_id": 6266}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "ensurepip.bootstrap(verbosity=0)", "intent": "Bootstraps pip into the current or designated environment . `verbosity` controls the level of output to sys.stdout from the bootstrapping operation .", "question_id": 3495}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "Morsel.setdefault(key, value=None)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "question_id": 4612}
{"snippet": "bytes_generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the BytesGenerator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3088}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "doctest.debug_src(src, pm=False)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument . Optional argument `pm` has the same meaning as in function debug ( ) above .", "question_id": 2891}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "urllib.request.urlopen(url, timeout)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11742}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "os.execv(path, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7013}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}
{"snippet": "zlib.compressobj(level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12916}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "shutil.rmtree(path, onerror=None)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "question_id": 8335}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "urllib.request.HTTPSHandler(debuglevel=0)", "intent": "A class to handle opening of HTTPS URLs . With arguments `debuglevel`.", "question_id": 11803}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "argparse.ArgumentParser(parents=)", "intent": "Create a new ArgumentParser object . With arguments `parents`.", "question_id": 43}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "str(errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4118}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}
{"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}
{"snippet": "logging.FileHandler(filename, mode='a')", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5427}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "base_selector.register(fileobj, events, data=None)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor . `data` is an opaque object .", "question_id": 8216}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "datetime.timedelta(milliseconds=0)", "intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "question_id": 2208}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "msvcrt.setmode(fd, flags)", "intent": "Set the line-end translation mode for the file descriptor `fd` . To set it to text mode , `flags` should be os.O_TEXT ; for binary , it should be os.O_BINARY .", "question_id": 6152}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "str(errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4118}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "bdb.runeval(expr)", "intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "question_id": 811}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls, args=())", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`, `args`.", "question_id": 10272}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "loop.run_until_complete(future)", "intent": "Run until the `future` ( an instance of Future ) has completed .", "question_id": 182}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`.", "question_id": 5015}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "turtle.numinput(title, prompt, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11087}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "copy.deepcopy(x, memo)", "intent": "Return a deep copy of `x` . With arguments `memo`.", "question_id": 1662}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "http.client.HTTPConnection(host, timeout)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4366}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "open(file, newline=None)", "intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "question_id": 4067}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "formatter.push_style(*styles)", "intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "question_id": 3832}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "question_id": 6092}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}
{"snippet": "chunk.seek(pos, whence=0)", "intent": "Set the chunk \u2019 s current position . The `whence` argument is optional and defaults to 0 ( absolute file positioning ) ; other values are 1 ( seek relative to the current position ) and 2 ( seek relative to the file \u2019 s end ) . With arguments `pos`.", "question_id": 1088}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "shutil.rmtree(path, onerror=None)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "question_id": 8335}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "codecs.open(filename, buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1229}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3021}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "os.link(src, dst, src_dir_fd=None)", "intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "question_id": 6851}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.", "question_id": 63}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a `predicate` becomes true .", "question_id": 580}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "os.link(src, dst, src_dir_fd=None)", "intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "question_id": 6851}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`, `handle`.", "question_id": 1745}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "threading.Timer(interval, function, args=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10413}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}
{"snippet": "unittest.mock.mock_open(mock=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) .", "question_id": 11654}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "content_manager.set_content(msg, obj, *args, **kw)", "intent": "If the maintype is multipart , raise a TypeError ; otherwise look up a handler function based on the type of `obj` ( see next paragraph ) , call clear_content ( ) on the `msg` , and call the handler function , passing through all arguments . With arguments `*args`, `**kw`.", "question_id": 3033}
{"snippet": "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)", "intent": "Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.", "question_id": 12584}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "test_case.run(result=None)", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11370}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "importlib.resources.is_resource(package, name)", "intent": "Return True if there is a resource named `name` in the `package` , otherwise False .", "question_id": 4863}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "OptionParser.add_option(*opt_str, attr=value)", "intent": "To define an option with only a short option string : With arguments `*opt_str`, `attr`.", "question_id": 6625}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}
{"snippet": "int.from_bytes(bytes, byteorder, signed=False)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument indicates whether two \u2019 s complement is used to represent the integer .", "question_id": 9146}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12550}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "os.posix_fallocate(fd, offset, len)", "intent": "Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .", "question_id": 6775}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "doctest.set_unittest_reportflags(flags)", "intent": "Set the doctest reporting `flags` to use .", "question_id": 2816}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "test_case.assertEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are equal . With arguments `msg`.", "question_id": 11376}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "tempfile.mktemp(suffix='', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10099}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10738}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "shutil.rmtree(path, onerror=None)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "question_id": 8335}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "BaseCookie.load(rawdata)", "intent": "If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .", "question_id": 4594}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "bdb.dispatch_call(frame, arg)", "intent": "If the debugger should stop on this function call , invoke the user_call ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 774}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "webbrowser.register(name, constructor, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12112}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "tempfile.mktemp(suffix='', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10099}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "fcntl.ioctl(fd, request, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3744}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power .", "question_id": 4310}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12794}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6030}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "doctest.debug(module, name, pm=False)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "question_id": 2889}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "test_case.run(result=None)", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11370}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "shlex.push_source(newstream, newfile=None)", "intent": "Push an input source stream onto the input stack . With arguments `newstream`, `newfile`.", "question_id": 8288}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "nntplib.NNTP(host, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6412}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "fcntl.fcntl(fd, cmd, arg=0)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) . The argument `arg` can either be an integer value , or a bytes object .", "question_id": 3741}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "test.support.temp_dir(quiet=False)", "intent": "A context manager that creates a temporary directory at `path` and yields the directory . If `quiet` is False , the context manager raises an exception on error .", "question_id": 10178}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "TimeoutError", "intent": "Raised when a system function timed out at the system level.", "question_id": 3700}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "queue_listener.getChild(suffix)", "intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "question_id": 5569}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "int.to_bytes(length, byteorder, signed=False)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument determines whether two \u2019 s complement is used to represent the integer .", "question_id": 9144}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "datetime.timedelta(milliseconds=0)", "intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "question_id": 2208}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "nntplib.NNTP(host, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6412}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "email.contentmanager.set_content(msg, <'str'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3039}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "multiprocessing.Process(group=None, name=None)", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `name` is the process name ( see name for more details ) .", "question_id": 6173}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 2999}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 42}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "importlib.resources.is_resource(package, name)", "intent": "Return True if there is a resource named `name` in the `package` , otherwise False .", "question_id": 4863}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "unittest.TextTestRunner(failfast=False)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `failfast`.", "question_id": 11537}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "signal.getitimer(which)", "intent": "Returns current value of a given interval timer specified by `which` .", "question_id": 8393}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "nntplib.NNTP(host, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6412}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "codecs.encode(obj, encoding='utf-8')", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1193}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "formatter.get_value(key, args, kwargs)", "intent": "Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .", "question_id": 9521}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}
{"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "bdb.dispatch_call(frame, arg)", "intent": "If the debugger should stop on this function call , invoke the user_call ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 774}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "test.support.temp_dir(quiet=False)", "intent": "A context manager that creates a temporary directory at `path` and yields the directory . If `quiet` is False , the context manager raises an exception on error .", "question_id": 10178}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "bytes_generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the BytesGenerator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3088}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "ensurepip.bootstrap(verbosity=0)", "intent": "Bootstraps pip into the current or designated environment . `verbosity` controls the level of output to sys.stdout from the bootstrapping operation .", "question_id": 3495}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "fcntl.ioctl(fd, request, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3744}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, headers=None)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3046}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "fcntl.ioctl(fd, request, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3744}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "collections.namedtuple(typename, field_names)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "question_id": 1376}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "window.addstr(str, attr)", "intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2008}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "traceback.print_exc(limit=None, chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10750}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "formatter.get_value(key, args, kwargs)", "intent": "Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .", "question_id": 9521}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "xml.parsers.expat.ErrorString(errno)", "intent": "Returns an explanatory string for a given error number `errno` .", "question_id": 7727}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "OptionParser.add_option(*opt_str, attr=value)", "intent": "To define an option with only a short option string : With arguments `*opt_str`, `attr`.", "question_id": 6625}
{"snippet": "tarfile.open(**kwargs, name=None)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9891}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3021}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "meta_path_finder.find_spec(fullname, path, target=None)", "intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "question_id": 4804}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "TarFile.list(members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9929}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "multiprocessing.Process(group=None, args=())", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `args` is the argument tuple for the target invocation .", "question_id": 6174}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "email.contentmanager.set_content(msg, <'str'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3039}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "unittest.TextTestRunner(failfast=False)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `failfast`.", "question_id": 11537}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "struct.unpack_from(buffer, offset=0)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9563}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "signal.getitimer(which)", "intent": "Returns current value of a given interval timer specified by `which` .", "question_id": 8393}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "str(errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4118}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "logging.Formatter(fmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "question_id": 5611}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "bdb.dispatch_call(frame, arg)", "intent": "If the debugger should stop on this function call , invoke the user_call ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 774}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "fcntl.fcntl(fd, cmd, arg=0)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) . The argument `arg` can either be an integer value , or a bytes object .", "question_id": 3741}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "os.seteuid(euid)", "intent": "Set the current process \u2019 s effective user id . With arguments `euid`.", "question_id": 6694}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "message.set_default_type(ctype)", "intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "question_id": 2982}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "TimeoutError", "intent": "Raised when a system function timed out at the system level.", "question_id": 3700}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "test.support.check_warnings(*filters, quiet=True)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . If one or more filters are provided , or if the optional keyword argument `quiet` is False , it checks to make sure the warnings are as expected : each specified filter must match at least one of the warnings raised by the enclosed code or the test fails , and if any warnings are raised that do not match any of the specified filters the test fails . With arguments `*filters`.", "question_id": 10165}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5472}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "pdb.set_trace(header=None)", "intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "question_id": 7337}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "test_case.run(result=None)", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11370}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`, `stderr`.", "question_id": 327}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "BufferedProtocol.buffer_updated(nbytes)", "intent": "Called when the buffer was updated with the received data . `nbytes` is the total number of bytes that were written to the buffer .", "question_id": 438}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "iter(object, sentinel)", "intent": "Return an iterator `object` . If the second argument , `sentinel` , is given , then object must be a callable object .", "question_id": 4042}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "test_case.run(result=None)", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11370}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "ctypes.CDLL(name, use_errno=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_errno`.", "question_id": 1743}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "bytes_generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the BytesGenerator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3088}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "test_case.assertEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are equal . With arguments `msg`.", "question_id": 11376}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 42}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "tempfile.TemporaryDirectory(prefix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `prefix`, `dir`.", "question_id": 10069}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "turtle.speed(speed=None)", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10935}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "codecs.open(filename, buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1229}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "email.contentmanager.set_content(msg, <'str'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3039}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "str(errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4118}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "queue_listener.getChild(suffix)", "intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "question_id": 5569}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}
{"snippet": "doctest.Example(source, want, lineno=0, indent=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.", "question_id": 2832}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "mock.assert_has_calls(calls)", "intent": "assert the mock has been called with the specified `calls` .", "question_id": 11575}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "queue_listener.getChild(suffix)", "intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "question_id": 5569}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "unittest.mock.mock_open(mock=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) .", "question_id": 11654}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "test_case.assertEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are equal . With arguments `msg`.", "question_id": 11376}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "decimal.Context(capitals=None)", "intent": "Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .", "question_id": 2504}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8352}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "shelve.Shelf(dict, protocol=None)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8245}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "warnings.showwarning(message, category, filename, lineno, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12019}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "loop.run_until_complete(future)", "intent": "Run until the `future` ( an instance of Future ) has completed .", "question_id": 182}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "BaseTransport.set_protocol(protocol)", "intent": "Set a new `protocol` .", "question_id": 400}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}
{"snippet": "configparser.ConfigParser(':'), ';'), strict=True)", "intent": "The main configuration parser . When `strict` is True ( the default ) , the parser won \u2019 t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.", "question_id": 1503}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`, `handle`.", "question_id": 1745}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "shlex.shlex(posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8276}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "Node.toprettyxml(indent=\"\\t\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12414}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "sys.set_asyncgen_hooks(firstiter, finalizer)", "intent": "Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .", "question_id": 9840}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "TimeoutError", "intent": "Raised when a system function timed out at the system level.", "question_id": 3700}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "tarfile.TarFile(tarinfo=TarInfo)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `tarinfo` argument can be used to replace the default TarInfo class with a different one .", "question_id": 9918}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}
{"snippet": "warnings.showwarning(message, category, filename, lineno, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12019}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "bdb.runeval(expr)", "intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "question_id": 811}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "message.get_payload(i=None, decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2959}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "config_parser.readfp(fp, filename=None)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.", "question_id": 1567}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "fcntl.fcntl(fd, cmd)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3740}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`, `stderr`.", "question_id": 327}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "collections.namedtuple(typename, field_names)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "question_id": 1376}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "TarFile.list(members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9929}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "IMAP4.subscribe(mailbox)", "intent": "Subscribe to new `mailbox` .", "question_id": 4746}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "content_manager.add_get_handler(key, handler)", "intent": "Record the function `handler` as the handler for `key` .", "question_id": 3034}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}
{"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "codecs.open(filename, buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1229}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}
{"snippet": "bdb.runeval(expr)", "intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "question_id": 811}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "sys_log_handler.encodePriority(facility, priority)", "intent": "Encodes the `facility` and `priority` into an integer .", "question_id": 5504}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "collections.namedtuple(typename, field_names)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "question_id": 1376}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "http.client.HTTPConnection(host, timeout, port=None)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4367}
{"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "ensurepip.bootstrap(verbosity=0)", "intent": "Bootstraps pip into the current or designated environment . `verbosity` controls the level of output to sys.stdout from the bootstrapping operation .", "question_id": 3495}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, headers=None)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3046}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "os.execl(path, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . With arguments `arg0`, `arg1`.", "question_id": 7009}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "content_manager.add_get_handler(key, handler)", "intent": "Record the function `handler` as the handler for `key` .", "question_id": 3034}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power .", "question_id": 4310}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "timeit.repeat(stmt='pass', repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10495}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "doc_test_runner.run(test, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2876}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "str(object='')", "intent": "Return a str version of `object` .", "question_id": 4114}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "argparse.FileType(bufsize=-1, errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `errors`.", "question_id": 94}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "shelve.Shelf(dict, protocol=None)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8245}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "timeit.repeat(stmt='pass', repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10495}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "http.client.HTTPConnection(host, timeout)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4366}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "pdb.set_trace(header=None)", "intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "question_id": 7337}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "os.set_blocking(fd, blocking)", "intent": "Set the `blocking` mode of the specified file descriptor . With arguments `fd`.", "question_id": 6801}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\", optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2795}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "base_selector.register(fileobj, events, data=None)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor . `data` is an opaque object .", "question_id": 8216}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "POP3.getwelcome()", "intent": "Returns the greeting string sent by the POP3 server .", "question_id": 7602}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "Morsel.setdefault(key, value=None)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "question_id": 4612}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "decimal.Context(capitals=None)", "intent": "Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .", "question_id": 2504}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "meta_path_finder.find_spec(fullname, path, target=None)", "intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "question_id": 4804}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "mock.assert_has_calls(calls)", "intent": "assert the mock has been called with the specified `calls` .", "question_id": 11575}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "signal.getitimer(which)", "intent": "Returns current value of a given interval timer specified by `which` .", "question_id": 8393}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "ctypes.CDLL(name, use_errno=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_errno`.", "question_id": 1743}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3475}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "compileall.compile_dir(dir, force=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `force` is true , modules are re-compiled even if the timestamps are up to date .", "question_id": 1412}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.", "question_id": 63}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "collections.namedtuple(typename, field_names)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "question_id": 1376}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "config_parser.readfp(fp, filename=None)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.", "question_id": 1567}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "msvcrt.setmode(fd, flags)", "intent": "Set the line-end translation mode for the file descriptor `fd` . To set it to text mode , `flags` should be os.O_TEXT ; for binary , it should be os.O_BINARY .", "question_id": 6152}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}
{"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "ZipFile.open(name, mode='r', pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12810}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "ensurepip.bootstrap(verbosity=0)", "intent": "Bootstraps pip into the current or designated environment . `verbosity` controls the level of output to sys.stdout from the bootstrapping operation .", "question_id": 3495}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`.", "question_id": 5015}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "unittest.main(defaultTest=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11547}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "unittest.TextTestRunner(verbosity=1)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `verbosity`.", "question_id": 11536}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "compileall.compile_dir(dir, rx=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "question_id": 1413}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "unittest.TextTestRunner(verbosity=1)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `verbosity`.", "question_id": 11536}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}
{"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "SystemError", "intent": "Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope.", "question_id": 3668}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "warnings.filterwarnings(action, message='')", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "question_id": 12024}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "os.fdopen(fd, *args, **kwargs)", "intent": "Return an open file object connected to the file descriptor `fd` . With arguments `*args`, `**kwargs`.", "question_id": 6712}
{"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "meta_path_finder.find_spec(fullname, path, target=None)", "intent": "An abstract method for finding a spec for the specified module . If this is a top-level import , `path` will be None . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "question_id": 4804}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "xmlparser.ProcessingInstructionHandler(target, data)", "intent": "Called for every processing instruction . With arguments `target`, `data`.", "question_id": 7762}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "message.set_type(type, requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3015}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "textbox.edit(validator)", "intent": "This is the entry point you will normally use . If `validator` is supplied , it must be a function .", "question_id": 2136}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "warnings.filterwarnings(action, message='')", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "question_id": 12024}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "warnings.warn_explicit(message, category, filename, lineno)", "intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.", "question_id": 12007}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "logging.Formatter(fmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "question_id": 5611}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "warnings.showwarning(message, category, filename, lineno, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12019}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "doc_test_runner.run(test, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2876}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "question_id": 4913}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "BaseHandler.add_parent(director)", "intent": "Add a `director` as parent .", "question_id": 11840}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "dis.show_code(x, file=None)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2706}
{"snippet": "fcntl.fcntl(fd, cmd, arg=0)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) . The argument `arg` can either be an integer value , or a bytes object .", "question_id": 3741}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "struct.unpack_from(buffer, offset=0)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9563}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "question_id": 6092}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "multiprocessing.Process(group=None, args=())", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `args` is the argument tuple for the target invocation .", "question_id": 6174}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "textbox.edit(validator)", "intent": "This is the entry point you will normally use . If `validator` is supplied , it must be a function .", "question_id": 2136}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "BaseHandler.add_parent(director)", "intent": "Add a `director` as parent .", "question_id": 11840}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "struct.unpack_from(buffer, offset=0)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9563}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "OptionParser.add_option(*opt_str, attr=value)", "intent": "To define an option with only a short option string : With arguments `*opt_str`, `attr`.", "question_id": 6625}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6030}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}
{"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "widget.selection(items=None)", "intent": "If `selop` is not specified , returns selected `items` .", "question_id": 10652}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "abstract_event_loop_policy.set_child_watcher(watcher)", "intent": "Set the current child process `watcher` to watcher .", "question_id": 379}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "fileinput.input(bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `bufsize`.", "question_id": 3786}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "dis.dis(x=None, depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2712}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "urllib.request.urlopen(url, timeout)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11742}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "doc_test_runner.run(test, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2876}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "decimal.Context(prec=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context .", "question_id": 2500}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "tarfile.open(**kwargs, name=None)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9891}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}
{"snippet": "configparser.ConfigParser(':'), ';'), strict=True)", "intent": "The main configuration parser . When `strict` is True ( the default ) , the parser won \u2019 t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.", "question_id": 1503}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "xml.etree.ElementTree.fromstringlist(sequence, parser=None)", "intent": "Parses an XML document from a `sequence` of string fragments . `parser` is an optional parser instance .", "question_id": 12440}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "loop.run_until_complete(future)", "intent": "Run until the `future` ( an instance of Future ) has completed .", "question_id": 182}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "BaseCookie.load(rawdata)", "intent": "If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .", "question_id": 4594}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "turtle.numinput(title, prompt, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11087}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "typing.MutableMapping(MappingKT, VT)", "intent": "A generic version of collections.abc.MutableMapping . With arguments `MappingKT`, `VT`.", "question_id": 11259}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "unittest.mock.mock_open(mock=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) .", "question_id": 11654}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "question_id": 4913}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8352}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "content_manager.set_content(msg, obj, *args, **kw)", "intent": "If the maintype is multipart , raise a TypeError ; otherwise look up a handler function based on the type of `obj` ( see next paragraph ) , call clear_content ( ) on the `msg` , and call the handler function , passing through all arguments . With arguments `*args`, `**kw`.", "question_id": 3033}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "question_id": 4913}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "threading.Timer(interval, function, args=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10413}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "unittest.FunctionTestCase(testFunc)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`.", "question_id": 11473}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "dataclasses.field(default=MISSING, repr=True)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . With arguments `repr`.", "question_id": 2176}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "logging.Formatter(fmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "question_id": 5611}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "config_parser.readfp(fp, filename=None)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.", "question_id": 1567}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}
{"snippet": "traceback_exception.from_exception(exc, lookup_lines=True)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10814}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "json.loads(s, **kw, cls=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5302}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "argparse.FileType(bufsize=-1, errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `errors`.", "question_id": 94}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}
{"snippet": "doctest.debug(module, name, pm=False)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "question_id": 2889}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "argparse.FileType(errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `errors`.", "question_id": 89}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "mailbox.__setitem__(key, message)", "intent": "Replace the `message` corresponding to `key` with message .", "question_id": 5728}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "codecs.open(filename, buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1229}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "multiprocessing.Process(group=None, args=())", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `args` is the argument tuple for the target invocation .", "question_id": 6174}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "fcntl.ioctl(fd, request, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3744}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a `predicate` becomes true .", "question_id": 580}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "compileall.compile_path(skip_curdir=True, maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1437}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "shlex.shlex(posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8276}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031}
{"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "logging.FileHandler(filename, mode='a')", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5427}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `data`.", "question_id": 8164}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls, args=())", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`, `args`.", "question_id": 10272}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "ctypes.CDLL(name, use_errno=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_errno`.", "question_id": 1743}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "base64.b64encode(s, altchars=None)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "question_id": 709}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "nntplib.NNTP(host, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6416}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "unittest.FunctionTestCase(testFunc)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`.", "question_id": 11473}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "code.compile_command(source, filename=\"<input>\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1172}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "loop.run_until_complete(future)", "intent": "Run until the `future` ( an instance of Future ) has completed .", "question_id": 182}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "shlex.push_source(newstream, newfile=None)", "intent": "Push an input source stream onto the input stack . With arguments `newstream`, `newfile`.", "question_id": 8288}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "asyncio.sleep(delay)", "intent": "Block for `delay` seconds .", "question_id": 595}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "fcntl.ioctl(fd, request, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3744}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a `predicate` becomes true .", "question_id": 580}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "BufferedProtocol.buffer_updated(nbytes)", "intent": "Called when the buffer was updated with the received data . `nbytes` is the total number of bytes that were written to the buffer .", "question_id": 438}
{"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "ast.parse(source, filename='<unknown>', mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 148}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}
{"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "json.loads(s, **kw, cls=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5302}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}
{"snippet": "urllib.request.urlopen(url, data=None, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11761}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "doctest.Example(source, want, lineno=0, indent=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.", "question_id": 2832}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "bdb.runeval(expr)", "intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "question_id": 811}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "BaseHandler.add_parent(director)", "intent": "Add a `director` as parent .", "question_id": 11840}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "TimeoutError", "intent": "Raised when a system function timed out at the system level.", "question_id": 3700}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "dis.dis(x=None, depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2712}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "datetime.replace(minute=self.minute)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "question_id": 2289}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "threading.Timer(interval, function, args=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10413}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "xmlparser.ProcessingInstructionHandler(target, data)", "intent": "Called for every processing instruction . With arguments `target`, `data`.", "question_id": 7762}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "open(file, newline=None)", "intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "question_id": 4067}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "sys.set_asyncgen_hooks(firstiter, finalizer)", "intent": "Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .", "question_id": 9840}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "mailbox.__setitem__(key, message)", "intent": "Replace the `message` corresponding to `key` with message .", "question_id": 5728}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "ZipFile.open(name, mode='r', pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12810}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "loop.set_default_executor(executor)", "intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "question_id": 306}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "open(file, newline=None)", "intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "question_id": 4067}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "compileall.compile_dir(dir, rx=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "question_id": 1413}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "loop.set_default_executor(executor)", "intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "question_id": 306}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "datetime.time(microsecond=0)", "intent": "All arguments are optional . With arguments `microsecond`.", "question_id": 2318}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "importlib.resources.is_resource(package, name)", "intent": "Return True if there is a resource named `name` in the `package` , otherwise False .", "question_id": 4863}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "argparse.ArgumentParser(parents=)", "intent": "Create a new ArgumentParser object . With arguments `parents`.", "question_id": 43}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "pdb.set_trace(header=None)", "intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "question_id": 7337}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "str(object='')", "intent": "Return a str version of `object` .", "question_id": 4114}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "bdb.dispatch_call(frame, arg)", "intent": "If the debugger should stop on this function call , invoke the user_call ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 774}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "fcntl.fcntl(fd, cmd, arg=0)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) . The argument `arg` can either be an integer value , or a bytes object .", "question_id": 3741}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "typing.MutableMapping(MappingKT, VT)", "intent": "A generic version of collections.abc.MutableMapping . With arguments `MappingKT`, `VT`.", "question_id": 11259}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power .", "question_id": 4310}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "ctypes.CDLL(name, use_errno=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_errno`.", "question_id": 1743}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "test_case.assertEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are equal . With arguments `msg`.", "question_id": 11376}
{"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "decimal.Context(prec=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context .", "question_id": 2500}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "loop.run_until_complete(future)", "intent": "Run until the `future` ( an instance of Future ) has completed .", "question_id": 182}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds)", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1702}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "tarfile.open(**kwargs, mode='r', fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9898}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "timeit.timeit(stmt='pass', globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code . With arguments `stmt`.", "question_id": 10485}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "dataclasses.field(default=MISSING, repr=True)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . With arguments `repr`.", "question_id": 2176}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "dis.show_code(x, file=None)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2706}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "BaseTransport.set_protocol(protocol)", "intent": "Set a new `protocol` .", "question_id": 400}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "warnings.filterwarnings(action, message='')", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "question_id": 12024}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
